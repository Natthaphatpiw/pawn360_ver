#!/usr/bin/env python3
"""
Database Setup Script for Pawn Shop Management System
‡∏™‡∏£‡πâ‡∏≤‡∏á mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å collection ‡∏ï‡∏≤‡∏° DATABASE_DESIGN_REPORT.md
"""

import os
import sys
from datetime import datetime, timedelta
from typing import List, Dict, Any
import random

# MongoDB imports
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
from bson import ObjectId
from bson.json_util import dumps

# Environment variables
MONGODB_URI = "mongodb+srv://natthapiw_db_user:afOJe2MrgMDsmm6k@cluster0.skadipr.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
DATABASE_NAME = "pawn"

def connect_to_mongodb():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB"""
    try:
        client = MongoClient(MONGODB_URI)
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        client.admin.command('ping')
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ database
        db = client[DATABASE_NAME]
        print(f"üìä ‡πÉ‡∏ä‡πâ database: {DATABASE_NAME}")

        return client, db

    except ConnectionFailure as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÑ‡∏î‡πâ: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1)

def clear_database(db):
    """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô database"""
    try:
        collections = db.list_collection_names()
        for collection in collections:
            db[collection].drop()
        print("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

def generate_contract_number(store_id: str, date: datetime) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤"""
    date_str = date.strftime("%Y%m%d")
    random_suffix = str(random.randint(100, 999))
    return f"{store_id}{date_str}{random_suffix}"

def generate_id_number() -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
    return f"{random.randint(1, 9)}{random.randint(100000000, 999999999)}"

def generate_phone_number() -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
    return f"0{random.randint(80, 99)}{random.randint(1000000, 9999999)}"

def create_test_user(db):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á test user ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("üë§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á test user...")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á store ‡∏Å‡πà‡∏≠‡∏ô
    store_data = {
        "_id": ObjectId(),
        "storeName": "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏≥‡πÉ‡∏à‡∏î‡∏µ",
        "phone": "02-555-0123",
        "taxId": "0123456789012",
        "address": {
            "houseNumber": "123/45",
            "village": "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡πÉ‡∏à",
            "street": "‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å",
            "subDistrict": "‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á",
            "district": "‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á",
            "province": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
            "country": "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
            "postcode": "10400"
        },
        "logoUrl": None,
        "stampUrl": None,
        "signatureUrl": None,
        "interestPresets": [
            {"days": 7, "rate": 3.0},
            {"days": 15, "rate": 5.0},
            {"days": 30, "rate": 10.0}
        ],
        "contractTemplate": {
            "header": "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥",
            "footer": "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
            "terms": "‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏≥‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
        },
        "ownerId": None,  # ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á user
        "isActive": True,
        "createdAt": datetime.now(),
        "updatedAt": datetime.now()
    }

    store_id = db.stores.insert_one(store_data).inserted_id
    print(f"üè™ ‡∏™‡∏£‡πâ‡∏≤‡∏á store ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {store_id}")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á test user
    user_data = {
        "_id": ObjectId(),
        "email": "test@pawnshop.com",
        "passwordHash": "$2b$10$test.hash.for.demo.purposes.only",  # bcrypt hash ‡∏Ç‡∏≠‡∏á "password123"
        "role": "owner",
        "fullName": "‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
        "phone": "02-555-0123",
        "profileImage": None,
        "address": {
            "houseNumber": "123/45",
            "village": "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡πÉ‡∏à",
            "street": "‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å",
            "subDistrict": "‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á",
            "district": "‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á",
            "province": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
            "country": "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
            "postcode": "10400"
        },
        "isActive": True,
        "lastLogin": None,
        "createdAt": datetime.now(),
        "updatedAt": datetime.now(),
        "storeId": store_id
    }

    user_id = db.users.insert_one(user_data).inserted_id

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï store ‡πÉ‡∏´‡πâ‡∏°‡∏µ ownerId
    db.stores.update_one(
        {"_id": store_id},
        {"$set": {"ownerId": user_id}}
    )

    print(f"üë§ ‡∏™‡∏£‡πâ‡∏≤‡∏á test user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {user_id}")
    return store_id, user_id

def create_customers(db, store_id: ObjectId, count: int = 10):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
    print(f"üë• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á {count} ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...")

    customers = []
    titles = ["‡∏ô‡∏≤‡∏¢", "‡∏ô‡∏≤‡∏á", "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß"]
    first_names = ["‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á", "‡∏ß‡∏¥‡∏ä‡∏±‡∏¢", "‡∏°‡∏≤‡∏•‡∏µ", "‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", "‡∏™‡∏∏‡∏ô‡∏µ‡∏¢‡πå", "‡∏ò‡∏ô‡∏≤", "‡∏ô‡∏†‡∏≤‡∏û‡∏£", "‡∏≠‡∏î‡∏¥‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå", "‡∏ô‡∏§‡∏°‡∏•"]
    last_names = ["‡πÉ‡∏à‡∏î‡∏µ", "‡∏£‡∏±‡∏Å‡∏î‡∏µ", "‡πÄ‡∏Å‡πà‡∏á‡∏Å‡∏≤‡∏à", "‡∏Ç‡∏¢‡∏±‡∏ô‡∏î‡∏µ", "‡∏°‡∏±‡πà‡∏á‡∏°‡∏µ", "‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°", "‡∏£‡πà‡∏≥‡∏£‡∏ß‡∏¢", "‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏¥‡πà‡∏°", "‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ", "‡∏™‡∏î‡πÉ‡∏™"]

    for i in range(count):
        customer = {
            "_id": ObjectId(),
            "title": random.choice(titles),
            "firstName": random.choice(first_names),
            "lastName": random.choice(last_names),
            "fullName": f"{random.choice(titles)} {random.choice(first_names)} {random.choice(last_names)}",
            "phone": generate_phone_number(),
            "idNumber": generate_id_number(),
            "address": {
                "houseNumber": f"{random.randint(1, 999)}/{random.randint(1, 99)}",
                "village": f"‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô{random.choice(['‡∏™‡∏∏‡∏Ç‡πÉ‡∏à', '‡∏£‡πà‡∏°‡∏£‡∏∑‡πà‡∏ô', '‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', '‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á'])}",
                "street": f"‡∏ñ‡∏ô‡∏ô{random.choice(['‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó', '‡∏£‡∏±‡∏ä‡∏î‡∏≤', '‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏°‡∏ó‡∏µ‡πà 9', '‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß'])}",
                "subDistrict": random.choice(["‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á", "‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á", "‡∏™‡∏≤‡∏°‡πÄ‡∏™‡∏ô‡πÉ‡∏ô", "‡∏ó‡∏∏‡πà‡∏á‡∏û‡∏ç‡∏≤‡πÑ‡∏ó"]),
                "district": random.choice(["‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á", "‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á", "‡∏û‡∏ç‡∏≤‡πÑ‡∏ó", "‡∏£‡∏≤‡∏ä‡πÄ‡∏ó‡∏ß‡∏µ"]),
                "province": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                "country": "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
                "postcode": f"{random.randint(10, 11)}{random.randint(100, 999)}{random.randint(10, 99)}"
            },
            "totalContracts": random.randint(0, 5),
            "totalValue": random.randint(10000, 100000),
            "lastContractDate": datetime.now() - timedelta(days=random.randint(1, 365)),
            "storeId": store_id,
            "createdBy": ObjectId(),  # ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô user_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            "createdAt": datetime.now() - timedelta(days=random.randint(1, 365)),
            "updatedAt": datetime.now()
        }
        customers.append(customer)

    result = db.customers.insert_many(customers)
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á {len(result.inserted_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    return result.inserted_ids

def create_items(db, store_id: ObjectId, count: int = 20):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
    print(f"üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á {count} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...")

    items = []
    brands = ["Apple", "Samsung", "Dell", "HP", "Lenovo", "ASUS", "MSI", "Acer", "Sony", "LG"]
    types = ["Smartphone", "Laptop", "Desktop", "Tablet", "Gaming PC", "Monitor", "Smartwatch", "Camera"]
    models = {
        "Smartphone": ["iPhone 15", "Galaxy S24", "Pixel 8", "OnePlus 12", "Xiaomi 14"],
        "Laptop": ["MacBook Pro", "ThinkPad X1", "Dell XPS", "Surface Pro", "ROG Strix"],
        "Desktop": ["iMac", "Surface Studio", "Gaming PC", "All-in-One", "Workstation"],
        "Tablet": ["iPad Pro", "Galaxy Tab", "Surface Pro", "Kindle Fire", "Lenovo Tab"],
        "Gaming PC": ["ROG Strix", "Alienware", "Predator", "Legion", "Omen"],
        "Monitor": ["UltraWide", "Gaming Monitor", "4K Monitor", "Curved Monitor", "Portable"],
        "Smartwatch": ["Apple Watch", "Galaxy Watch", "Pixel Watch", "Fitbit", "Garmin"],
        "Camera": ["DSLR", "Mirrorless", "Action Camera", "Drone Camera", "Security Camera"]
    }

    for i in range(count):
        item_type = random.choice(types)
        model = random.choice(models[item_type])

        item = {
            "_id": ObjectId(),
            "brand": random.choice(brands),
            "model": model,
            "type": item_type,
            "serialNo": f"SN{random.randint(100000, 999999)}",
            "condition": random.randint(70, 100),
            "defects": random.choice(["", "‡∏£‡∏≠‡∏¢‡∏Ç‡∏µ‡∏î‡∏Ç‡πà‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏°‡∏≤‡∏Å"]),
            "note": random.choice(["", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏µ", "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏Å‡∏∞‡∏Å‡∏•‡πà‡∏≠‡∏á"]),
            "accessories": random.choice(["", "‡∏™‡∏≤‡∏¢‡∏ä‡∏≤‡∏£‡πå‡∏à", "‡∏Å‡∏•‡πà‡∏≠‡∏á + ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠", "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∏‡∏î"]),
            "images": [],
            "status": random.choice(["available", "pawned", "sold", "lost"]),
            "currentContractId": None,
            "contractHistory": [],
            "storeId": store_id,
            "createdAt": datetime.now() - timedelta(days=random.randint(1, 365)),
            "updatedAt": datetime.now()
        }
        items.append(item)

    result = db.items.insert_many(items)
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á {len(result.inserted_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    return result.inserted_ids

def create_contracts(db, store_id: ObjectId, user_id: ObjectId, customers: List[ObjectId], items: List[ObjectId], count: int = 15):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
    print(f"üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á {count} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤...")

    contracts = []
    statuses = ["active", "overdue", "redeemed", "suspended", "sold"]

    for i in range(count):
        customer_id = random.choice(customers)
        item_id = random.choice(items)

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        start_date = datetime.now() - timedelta(days=random.randint(1, 365))
        period_days = random.choice([7, 15, 30, 60, 90])
        due_date = start_date + timedelta(days=period_days)

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        ai_price = random.randint(5000, 50000)
        pawned_price = int(ai_price * random.uniform(0.6, 0.9))
        status = random.choice(statuses)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤
        contract = {
            "_id": ObjectId(),
            "contractNumber": generate_contract_number("STORE", start_date),
            "status": status,
            "customerId": customer_id,
            "item": {
                "brand": random.choice(["Apple", "Samsung", "Dell", "HP"]),
                "model": random.choice(["iPhone 15", "MacBook Pro", "Galaxy S24", "ThinkPad X1"]),
                "type": random.choice(["Smartphone", "Laptop", "Desktop", "Tablet"]),
                "serialNo": f"SN{random.randint(100000, 999999)}",
                "accessories": random.choice(["‡∏™‡∏≤‡∏¢‡∏ä‡∏≤‡∏£‡πå‡∏à", "‡∏Å‡∏•‡πà‡∏≠‡∏á + ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠", "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö"]),
                "condition": random.randint(70, 100),
                "defects": random.choice(["", "‡∏£‡∏≠‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"]),
                "note": random.choice(["", "‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏°‡∏≤‡∏Å", "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]),
                "images": []
            },
            "pawnDetails": {
                "aiEstimatedPrice": ai_price,
                "pawnedPrice": pawned_price,
                "interestRate": random.choice([3.0, 5.0, 10.0]),
                "periodDays": period_days,
                "totalInterest": pawned_price * (random.choice([3.0, 5.0, 10.0]) / 100) * (period_days / 30),
                "remainingAmount": pawned_price + (pawned_price * (random.choice([3.0, 5.0, 10.0]) / 100) * (period_days / 30))
            },
            "dates": {
                "startDate": start_date,
                "dueDate": due_date,
                "redeemDate": None if status != "redeemed" else start_date + timedelta(days=random.randint(1, period_days)),
                "suspendedDate": None if status != "suspended" else start_date + timedelta(days=random.randint(1, 30))
            },
            "transactionHistory": [],
            "storeId": store_id,
            "createdBy": user_id,
            "createdAt": start_date,
            "updatedAt": datetime.now()
        }

        # ‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô redeemed ‡∏´‡∏£‡∏∑‡∏≠ suspended ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï item status
        if status in ["redeemed", "suspended"]:
            db.items.update_one(
                {"_id": item_id},
                {"$set": {"status": "available", "currentContractId": None}}
            )

        contracts.append(contract)

    result = db.contracts.insert_many(contracts)
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á {len(result.inserted_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    return result.inserted_ids

def create_transactions(db, contracts: List[ObjectId], customers: List[ObjectId], user_id: ObjectId, store_id: ObjectId):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
    print("üí∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á...")

    transactions = []
    transaction_types = ["pawn", "interest_payment", "redeem", "extend", "suspend", "sell"]
    payment_methods = ["cash", "bank_transfer", "promptpay"]

    for contract_id in contracts:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á 2-5 ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤
        num_transactions = random.randint(2, 5)

        for i in range(num_transactions):
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
            base_date = datetime.now() - timedelta(days=random.randint(1, 180))
            transaction_date = base_date + timedelta(days=i * 15)

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
            trans_type = random.choice(transaction_types)

            if trans_type == "pawn":
                amount = random.randint(5000, 30000)
            elif trans_type == "interest_payment":
                amount = random.randint(100, 1000)
            elif trans_type == "redeem":
                amount = random.randint(10000, 50000)
            else:
                amount = random.randint(500, 5000)

            transaction = {
                "_id": ObjectId(),
                "type": trans_type,
                "amount": amount,
                "paymentMethod": random.choice(payment_methods),
                "contractId": contract_id,
                "customerId": random.choice(customers),
                "itemId": None,  # ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                "processedBy": user_id,
                "note": f"Transaction {i+1} for contract",
                "beforeBalance": amount * (1 + i),
                "afterBalance": amount * (1 + i) - amount,
                "storeId": store_id,
                "createdAt": transaction_date
            }

            transactions.append(transaction)

    result = db.transactions.insert_many(transactions)
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á {len(result.inserted_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

def create_indexes(db):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance"""
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á database indexes...")

    # Users Collection
    db.users.create_index([("email", 1)], unique=True)
    db.users.create_index([("storeId", 1)])
    db.users.create_index([("role", 1)])

    # Stores Collection
    db.stores.create_index([("ownerId", 1)])
    db.stores.create_index([("taxId", 1)])

    # Customers Collection
    db.customers.create_index([("idNumber", 1)], unique=True)
    db.customers.create_index([("storeId", 1)])
    db.customers.create_index([("phone", 1)])

    # Contracts Collection
    db.contracts.create_index([("contractNumber", 1)], unique=True)
    db.contracts.create_index([("storeId", 1)])
    db.contracts.create_index([("customerId", 1)])
    db.contracts.create_index([("status", 1)])
    db.contracts.create_index([("dates.dueDate", 1)])
    db.contracts.create_index([("dates.startDate", 1)])
    # Compound indexes
    db.contracts.create_index([("storeId", 1), ("status", 1), ("dates.dueDate", 1)])
    db.contracts.create_index([("storeId", 1), ("dates.startDate", -1)])

    # Items Collection
    db.items.create_index([("storeId", 1)])
    db.items.create_index([("status", 1)])
    db.items.create_index([("type", 1)])

    # Transactions Collection
    db.transactions.create_index([("contractId", 1)])
    db.transactions.create_index([("storeId", 1)])
    db.transactions.create_index([("type", 1)])
    db.transactions.create_index([("createdAt", -1)])

    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á mock data"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pawn Shop Management System")
    print("=" * 70)

    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
    client, db = connect_to_mongodb()

    try:
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        clear_database(db)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á test user ‡πÅ‡∏•‡∏∞ store
        store_id, user_id = create_test_user(db)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        customer_ids = create_customers(db, store_id, 10)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        item_ids = create_items(db, store_id, 20)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤
        contract_ids = create_contracts(db, store_id, user_id, customer_ids, item_ids, 15)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
        create_transactions(db, contract_ids, customer_ids, user_id, store_id)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes
        create_indexes(db)

        print("=" * 70)
        print("üéâ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á mock data ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
        print(f"   üë§ Users: 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (test user)")
        print(f"   üè™ Stores: 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"   üë• Customers: 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"   üì¶ Items: 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"   üìã Contracts: 15 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"   üí∞ Transactions: {random.randint(30, 75)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)")
        print()
        print("üîë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        print(f"   Email: test@pawnshop.com")
        print(f"   Password: password123")
        print(f"   Role: owner")
        print()
        print("üìù ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
        print("üóÇÔ∏è Indexes ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        client.close()
        print("üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB")

if __name__ == "__main__":
    main()